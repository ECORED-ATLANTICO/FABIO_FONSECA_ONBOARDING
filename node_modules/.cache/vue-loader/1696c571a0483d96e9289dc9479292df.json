{"remainingRequest":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/src/views/Tema1.vue?vue&type=template&id=c6d0be00&lang=pug","dependencies":[{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/src/views/Tema1.vue","mtime":1739502242639},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/FABIO_FONSECA_ONBOARDING/FABIO_FONSECA_ONBOARDING/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}